<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- <context:property-placeholder location="classpath:env/env.properties" /> -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	 <!-- 扫描包（package）中的映射器 Mapper 接口，并自动地注册。 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.alibaba.alisonar.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  
    </bean>  


	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>


	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.alibaba.alisonar.domain" />
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
	</bean>


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${connection_pools.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${connection_pools.maxActive}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${connection_pools.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${connection_pools.maxWait}" />

		<property name="validationQuery" value="select 1" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${connection_pools.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="${connection_pools.minEvictableIdleTimeMillis}" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
	</bean>

</beans>
